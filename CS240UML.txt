actor Client
participant Server
participant Handler
participant Service
participant DataAccess
database db

entryspacing 0.9
group #navy Registration #white
Client -> Server: [POST] /user\n{"username":" ", "password":" ", "email":" "}
Server -> Handler: {"username":" ", "password":" ", "email":" "}
Handler -> Service: register(RegisterRequest)
Service -> DataAccess: getUser(username)
DataAccess -> db:Find UserData by username
DataAccess --> Service: null
Service -> DataAccess:createUser(userData)
DataAccess -> db:Add UserData
Service -> DataAccess:createAuth(authData)
DataAccess -> db:Add AuthData
Service --> Handler: RegisterResult
Handler --> Server: {"username" : " ", "authToken" : " "}
Server --> Client: 200\n{"username" : " ", "authToken" : " "}
end

group #orange Login #white
Client -> Server: [POST] /session\n{username, password}
Server -> Handler: {"username":" ","password":" "}
Handler -> Service: login(LoginRequest)
Service -> DataAccess: getUser(username)
DataAccess -> db: Find UserData by username
DataAccess --> Service: password correct
Service -> DataAccess: createAuth(AuthData)
DataAccess -> db: Add AuthData
Service --> Handler: LoginResult
Handler --> Server: {"username":" ", "authToken":" "}
Server --> Client: 200\n{"username":" ", "authToken":" "}
end

group #green Logout #white
Client -> Server: [DELETE] /session\nauthToken
Server -> Handler: {}
Handler -> Service: logout(authToken)
Service -> DataAccess: getAuth(authToken)
DataAccess -> db: Find AuthData by authToken
DataAccess --> Service: AuthData authToken is valid
Service -> DataAccess: deleteAuth(AuthData)
DataAccess -> db: delete AuthData
Service --> Handler: LogoutResult
Handler --> Server: {}
Server --> Client: 200\n{}
end

group #red List Games #white
Client -> Server: [GET] /game\nauthToken
Server -> Handler: {}
Handler -> Service: getGames(authToken)
Service -> DataAccess: getAuth(authToken)
DataAccess -> db: Find AuthData with authToken
DataAccess --> Service: AuthData is valid
Service -> DataAccess: listGames
DataAccess -> db: find all GameData in db
DataAccess --> Service: list of all GameData
Service --> Handler: getGameResult
Handler --> Server: { "games": [{"gameID": 1234, "whiteUsername":" ", "blackUsername":" ", "gameName:" "}]}
Server --> Client: 200\n{"games": [{"gameID": 1234, "whiteUsername":" ", "blackUsername":" ", "gameName:" "}]}
end

group #purple Create Game #white
Client -> Server: [POST] /game\nauthToken\n{gameName}
Server -> Handler: {"gameName":" "}
Handler -> Service: makeGame(authToken)
Service -> DataAccess: getAuth(authToken)
DataAccess -> db: Find AuthData by authToken
DataAccess --> Service: authToken valid
Service -> DataAccess: createGame(gameName)
DataAccess -> db: create GameData
DataAccess --> Service: GameData
Service --> Handler: makeGameResult
Handler --> Server: {"gameID": 12345}
Server --> Client: 200\n{"gameID": 12345}
end

group #yellow Join Game #black
Client -> Server: [PUT] /game\nauthToken\n{playerColor, gameID}
Server -> Handler: {"playerColor":"WHITE/BLACK", "gameID": 1234}
Handler -> Service: joinGame(gameID)
Service -> DataAccess: getAuth(authToken)
DataAccess -> db: get AuthData with authToken
DataAccess --> Service: authToken valid
Service -> DataAccess: getGame(gameID)
DataAccess -> db: find GameData with gameID
DataAccess --> Service: gameID valid
Service -> DataAccess: updateGame(playerColor, AuthData, GameData)
DataAccess -> db: GameData updated
Service --> Handler: joinGameResult
Handler --> Server: {}
Server --> Client: 200\n{}
end

group #gray Clear application #white
Client -> Server: [DELETE] /db
Server -> Handler: {}
Handler-> Service: deleteAll
Service -> DataAccess: clearUsers
DataAccess -> db: delete all UserData
Service -> DataAccess: clearAuth
DataAccess -> db: delete all AuthData
Service -> DataAccess: clearGames
DataAccess -> db: delete all GameData
Service --> Handler: deleteAllResult
Handler --> Server: {}
Server --> Client: 200\n{}
end
